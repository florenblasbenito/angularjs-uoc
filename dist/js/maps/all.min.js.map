{"version":3,"sources":["shoppingCart.js","app.js","controllers.js","directives.js","listserver.js","login.js","logout.js","services.js"],"names":["shoppingCart","cartName","this","clearCart","checkoutParameters","items","loadItems","self","$","window","unload","clearItems","saveItems","serviceName","merchantID","options","cartItem","id","name","price","quantity","angular","module","config","$routeProvider","when","templateUrl","controller","otherwise","redirectTo","storeCtrl","$scope","$routeParams","DataService","store","cart","productId","product","getProduct","review","addReview","book","reviews","push","app","directive","restrict","tab","isSet","checkTab","setTab","activeTab","controllerAs","current","setCurrent","imageNumber","angularTodo","$http","names","get","success","data","eval","console","log","error","alert","addNom","post","nom","titulo","title","imagen","cover","delNom","confirm","op","usuario","contrasena","LOGIN_URL","postDataResponse","sendData","loginData","param","user","passwd","headers","Content-Type","status","JSON","stringify","header","location","attr","isLoggedIn","logout","factory","$resource","query","method","params","isArray","service","Product","products","pId","i","length","onlineStore","myStore","myCart","addCheckoutParameters","prototype","localStorage","parse","item","err","addItem","toNumber","found","splice","getTotalPrice","total","getTotalCount","count","checkout","p","Object","keys","parms","checkoutPayPal","cmd","business","upload","rm","charset","ctr","toFixed","form","addFormFields","append","submit","remove","each","value","input","val","isNaN"],"mappings":"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","file":"all.min.js","sourcesContent":["//----------------------------------------------------------------\n// shopping cart\n//\nfunction shoppingCart(cartName) {\n    this.cartName = cartName;\n    this.clearCart = false;\n    this.checkoutParameters = {};\n    this.items = [];\n\n    // load items from local storage when initializing\n    this.loadItems();\n\n    // save items to local storage when unloading\n    var self = this;\n    $(window).unload(function () {\n        if (self.clearCart) {\n            self.clearItems();\n        }\n        self.saveItems();\n        self.clearCart = false;\n    });\n}\n\n// load items from local storage\nshoppingCart.prototype.loadItems = function () {\n    var items = localStorage != null ? localStorage[this.cartName + \"_items\"] : null;\n    if (items != null && JSON != null) {\n        try {\n            var items = JSON.parse(items);\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (item.id != null && item.name != null && item.price != null && item.quantity != null) {\n                    item = new cartItem(item.id, item.name, item.price, item.quantity);\n                    this.items.push(item);\n                }\n            }\n        }\n        catch (err) {\n            // ignore errors while loading...\n        }\n    }\n}\n\n// save items to local storage\nshoppingCart.prototype.saveItems = function () {\n    if (localStorage != null && JSON != null) {\n        localStorage[this.cartName + \"_items\"] = JSON.stringify(this.items);\n    }\n}\n\n// adds an item to the cart\nshoppingCart.prototype.addItem = function (id, name, price, quantity) {\n    quantity = this.toNumber(quantity);\n    if (quantity != 0) {\n\n        // update quantity for existing item\n        var found = false;\n        for (var i = 0; i < this.items.length && !found; i++) {\n            var item = this.items[i];\n            if (item.id == id) {\n                found = true;\n                item.quantity = this.toNumber(item.quantity + quantity);\n                if (item.quantity <= 0) {\n                    this.items.splice(i, 1);\n                }\n            }\n        }\n\n        // new item, add now\n        if (!found) {\n            var item = new cartItem(id, name, price, quantity);\n            this.items.push(item);\n        }\n\n        // save changes\n        this.saveItems();\n    }\n}\n\n// get the total price for all items currently in the cart\nshoppingCart.prototype.getTotalPrice = function (id) {\n    var total = 0;\n    for (var i = 0; i < this.items.length; i++) {\n        var item = this.items[i];\n        if (id == null || item.id == id) {\n            total += this.toNumber(item.quantity * item.price);\n        }\n    }\n    return total;\n}\n\n// get the total price for all items currently in the cart\nshoppingCart.prototype.getTotalCount = function (id) {\n    var count = 0;\n    for (var i = 0; i < this.items.length; i++) {\n        var item = this.items[i];\n        if (id == null || item.id == id) {\n            count += this.toNumber(item.quantity);\n        }\n    }\n    return count;\n}\n\n// clear the cart\nshoppingCart.prototype.clearItems = function () {\n    this.items = [];\n    this.saveItems();\n}\n\n// define checkout parameters\nshoppingCart.prototype.addCheckoutParameters = function (serviceName, merchantID, options) {\n\n    // check parameters\n    if (serviceName != \"PayPal\" && serviceName != \"Google\" && serviceName != \"Stripe\") {\n        throw \"serviceName must be 'PayPal' or 'Google' or 'Stripe'.\";\n    }\n    if (merchantID == null) {\n        throw \"A merchantID is required in order to checkout.\";\n    }\n\n    // save parameters\n    this.checkoutParameters[serviceName] = new checkoutParameters(serviceName, merchantID, options);\n}\n\n// check out\nshoppingCart.prototype.checkout = function (serviceName, clearCart) {\n\n    // select serviceName if we have to\n    if (serviceName == null) {\n        var p = this.checkoutParameters[Object.keys(this.checkoutParameters)[0]];\n        serviceName = p.serviceName;\n    }\n\n    // sanity\n    if (serviceName == null) {\n        throw \"Use the 'addCheckoutParameters' method to define at least one checkout service.\";\n    }\n\n    // go to work\n    var parms = this.checkoutParameters[serviceName];\n    if (parms == null) {\n        throw \"Cannot get checkout parameters for '\" + serviceName + \"'.\";\n    }\n    switch (parms.serviceName) {\n        case \"PayPal\":\n        this.checkoutPayPal(parms, clearCart);\n        break;\n        default:\n        throw \"Unknown checkout service: \" + parms.serviceName;\n    }\n}\n\n// check out using PayPal\n// for details see:\n// www.paypal.com/cgi-bin/webscr?cmd=p/pdn/howto_checkout-outside\nshoppingCart.prototype.checkoutPayPal = function (parms, clearCart) {\n\n    // global data\n    var data = {\n        cmd: \"_cart\",\n        business: parms.merchantID,\n        upload: \"1\",\n        rm: \"2\",\n        charset: \"utf-8\"\n    };\n\n    // item data\n    for (var i = 0; i < this.items.length; i++) {\n        var item = this.items[i];\n        var ctr = i + 1;\n        data[\"item_number_\" + ctr] = item.id;\n        data[\"item_name_\" + ctr] = item.name;\n        data[\"quantity_\" + ctr] = item.quantity;\n        data[\"amount_\" + ctr] = item.price.toFixed(2);\n    }\n\n    // build form\n    var form = $('<form/></form>');\n    form.attr(\"action\", \"https://www.paypal.com/cgi-bin/webscr\");\n    form.attr(\"method\", \"POST\");\n    form.attr(\"style\", \"display:none;\");\n    this.addFormFields(form, data);\n    this.addFormFields(form, parms.options);\n    $(\"body\").append(form);\n\n    // submit form\n    this.clearCart = clearCart == null || clearCart;\n    form.submit();\n    form.remove();\n}\n\n\n// utility methods\nshoppingCart.prototype.addFormFields = function (form, data) {\n    if (data != null) {\n        $.each(data, function (name, value) {\n            if (value != null) {\n                var input = $(\"<input></input>\").attr(\"type\", \"hidden\").attr(\"name\", name).val(value);\n                form.append(input);\n            }\n        });\n    }\n}\nshoppingCart.prototype.toNumber = function (value) {\n    value = value * 1;\n    return isNaN(value) ? 0 : value;\n}\n\n//----------------------------------------------------------------\n// checkout parameters (one per supported payment service)\n//\nfunction checkoutParameters(serviceName, merchantID, options) {\n    this.serviceName = serviceName;\n    this.merchantID = merchantID;\n    this.options = options;\n}\n\n//----------------------------------------------------------------\n// items in the cart\n//\nfunction cartItem(id, name, price, quantity) {\n    this.id = id;\n    this.name = name;\n    this.price = price * 1;\n    this.quantity = quantity * 1;\n}\n\n","(function(){\n\n// App Module: the name AngularStore matches the ng-app attribute in the main <html> tag\n// the route provides parses the URL and injects the appropriate partial page\nvar storeApp = angular.module('AngularStore', ['ngRoute','storeCtrl','storeServices','storeDirectives','HttpApp','lostsysApp','logoutApp']).\nconfig(['$routeProvider', function($routeProvider) {\n  $routeProvider.\n  when('/store', {\n    templateUrl: 'partials/store.html',\n    controller: 'storeController' \n  }).\n  when('/products/:productId', {\n    templateUrl: 'partials/product.html',\n    controller: 'storeController'\n  }).\n  when('/cart', {\n    templateUrl: 'partials/shoppingCart.html',\n    controller: 'storeController'\n  }).\n  when('/list', {\n    templateUrl: 'partials/list.html',\n    controller: 'storeController' \n  }).\n  otherwise({\n    redirectTo: '/index'\n  });\n}]);\n\n})();\n","(function(){\n\nvar storeCtrl = angular.module('storeCtrl', []);\n\n// the storeController contains two objects:\n// - store: contains the product list\n// - cart: the shopping cart object\nstoreCtrl.controller('storeController', ['$scope','$routeParams','DataService', function($scope, $routeParams, DataService){\n\t// get store and cart from service\n\t$scope.store = DataService.store;\n\t$scope.cart = DataService.cart;\n\n    // use routing to pick the selected product\n    if ($routeParams.productId != null) {\n    \t$scope.product = $scope.store.getProduct($routeParams.productId);\n    }\n\n}]);\n\nstoreCtrl.controller('ReviewController', function() {\n\tthis.review = {};\n\tthis.addReview = function(book) {\n\t\tbook.reviews.push(this.review);\n\t\tthis.review = {};\n\t};\n});\n\n})();","(function(){\n  var app = angular.module('storeDirectives', []);\n\n  app.directive(\"productDescription\", function() {\n    return {\n      restrict: 'E',\n      templateUrl: \"partials/product-description.html\"\n    };\n  });\n\n  app.directive(\"productReviews\", function() {\n    return {\n      restrict: 'E',\n      templateUrl: \"partials/product-reviews.html\"\n    };\n  });\n\n  app.directive(\"productSpecs\", function() {\n    return {\n      restrict:\"A\",\n      templateUrl: \"partials/product-specs.html\"\n    };\n  });\n\n  app.directive(\"productTabs\", function() {\n    return {\n      restrict: \"E\",\n      templateUrl: \"partials/product-tabs.html\",\n      controller: function() {\n        this.tab = 1;\n\n        this.isSet = function(checkTab) {\n          return this.tab === checkTab;\n        };\n\n        this.setTab = function(activeTab) {\n          this.tab = activeTab;\n        };\n      },\n      controllerAs: \"tab\"\n    };\n  });\n\n  app.directive(\"productGallery\", function() {\n    return {\n      restrict: \"E\",\n      templateUrl: \"partials/product-gallery.html\",\n      controller: function() {\n        this.current = 0;\n        this.setCurrent = function(imageNumber){\n          this.current = imageNumber || 0;\n        };\n      },\n      controllerAs: \"gallery\"\n    };\n  });\n})();\n","var angularTodo = angular.module('lostsysApp', []);    \r\n\r\n\r\n        angularTodo.controller('mainController', function($scope, $http) {\r\n            $scope.names = [];\r\n\r\n            $http.get('http://multimedia.uoc.edu/frontend/getbooks.php')\r\n                .success(function(data) {\r\n                    $scope.names = eval(data);\r\n                    console.log(data)\r\n                })\r\n                .error(function(data) {\r\n                    alert(data);\r\n                    console.log('Error: ' + data);\r\n                });\r\n\r\n            $scope.addNom = function() {\r\n                $http.post('http://multimedia.uoc.edu/frontend/getbooks.php', { nom: $scope.id, titulo: $scope.title, imagen: $scope.cover, } )\r\n                    .success(function(data) {\r\n                        $scope.names = eval(data);\r\n                        console.log(data)\r\n                    })\r\n                    .error(function(data) {\r\n                        console.log('Error: ' + data);\r\n                    });\r\n\r\n                $scope.id=\"\";\r\n                $scope.title=\"\";\r\n                $scope.cover=\"\";\r\n            }\r\n\r\n            $scope.delNom = function( nom ) {\r\n                if ( confirm(\"Seguro?\") ) {\r\n                    $http.post('http://multimedia.uoc.edu/frontend/getbooks.php', { op: 'delete', nom: nom } )\r\n                        .success(function(data) {\r\n                            $scope.names = eval(data);\r\n                            console.log(data)\r\n                        })\r\n                        .error(function(data) {\r\n                            console.log('Error: ' + data);\r\n                        });\r\n                }\r\n            }\r\n        });","\r\nangular.module(\"HttpApp\", [])\r\n.controller(\"HttpGetController\", ['$http', function ( $http ) {\r\n  var self = this;\r\n  \r\n  this.usuario = '';\r\n  this.contrasena = '';\r\n  this.LOGIN_URL = 'http://multimedia.uoc.edu/frontend/auth.php';\r\n  this.postDataResponse = '';\r\n  \r\n  self.sendData = function() {\r\n      // use $.param jQuery function to serialize data from JSON \r\n      var loginData = $.param({\r\n          user: self.usuario,\r\n          passwd: self.contrasena\r\n      });  \r\n    \r\n    console.log(loginData);\r\n        \r\n      var config = {\r\n          headers : { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' }\r\n      }\r\n\r\n      // Send login to the LOGIN_URL\r\n      self.postDataResponse = 'Sending login to the server...';\r\n      $http.post(self.LOGIN_URL, loginData, config)\r\n        .success(function (data, status, headers, config) {\r\n            console.log(data);\r\n            self.postDataResponse = JSON.stringify(data);\r\n            //$(location).attr('href', 'http:#/products/book05');\r\n        })\r\n        .error(function (data, status, header, config) {\r\n            self.postDataResponse = \"Data: \" + data +\r\n                \"<hr />status: \" + status +\r\n                \"<hr />headers: \" + header +\r\n                \"<hr />config: \" + config;\r\n        });\r\n        $(location).attr('href', 'http:#/list');\r\n  };\r\n}]);","var app = angular.module(\"logoutApp\", []);\r\n\r\napp.controller(\"logoutCtrl\", function($scope) {\r\n\r\n    $scope.user = 'demo';\r\n    $scope.passwd = 'demo';\r\n\r\n    $scope.isLoggedIn = true;\r\n\r\n    $scope.logout = function() {\r\n\r\n        console.log('Log out');\r\n        $scope.isLoggedIn = false;\r\n        $scope.user = '';\r\n    }\r\n});","(function(){\n\n    var app=angular.module(\"storeServices\",['ngResource']);\n\n    app.factory('Product', ['$resource',\n       function($resource){\n          return $resource('data/:productId.json', {}, {\n             query: {method:'GET', params:{productId:\"productList\"}, isArray:true}\n         });\n      }]);\n\n    app.service('onlineStore', ['Product', function(Product){\n\n       this.products=Product.query();\n\n       this.getProduct = function (pId) {\n          for (var i = 0; i < this.products.length; i++) {\n             if (this.products[i].id == pId)\n                return this.products[i];\n        }\n        return null;\n    };\n\n}]);\n\n// create a data service that provides a store and a shopping cart that\n// will be shared by all views (instead of creating fresh ones for each view).\napp.factory(\"DataService\", [\"onlineStore\",function (onlineStore) {\n\n    // create store\n    var myStore = onlineStore;\n\n    // create shopping cart\n    var myCart = new shoppingCart(\"AngularStore\");\n\n    // enable PayPal checkout\n    // note: the second parameter identifies the merchant; in order to use the \n    // shopping cart with PayPal, you have to create a merchant account with \n    // PayPal. You can do that here:\n    // https://www.paypal.com/webapps/mpp/merchant\n    myCart.addCheckoutParameters(\"PayPal\", \"paypaluser@youremail.com\");\n\n    // return data object with store and cart\n    return {\n        store: myStore,\n        cart: myCart\n    };\n}]);\n\n})();"],"sourceRoot":"/source/"}